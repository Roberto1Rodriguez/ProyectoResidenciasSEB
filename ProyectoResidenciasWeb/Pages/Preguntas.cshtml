@page
@model ProyectoResidenciasWeb.Pages.PreguntasModel
@{
}
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Preguntas y Respuestas</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.4.0/jspdf.umd.min.js"></script>
</head>
<style>
    #preguntas-list {
        list-style-type: decimal;
        padding-left: 20px;
    }
</style>
<body>
    <h1>Preguntas y Respuestas</h1>
    <div>
        <h2 id="tipo-seleccionado"></h2>
        <h3 id="nivel-educativo-seleccionado"></h3>
    </div>
    <div>
        <button onclick="filtrarPreguntas('Abierta')">Abiertas</button>
        <button onclick="filtrarPreguntas('Opción Múltiple')">Opción Múltiple</button>
        <button onclick="filtrarPreguntas('Falso-Verdadera')">Falso-Verdadera</button>
        <button onclick="filtrarPreguntas('Lectura Multirreactivos')">Lectura Multirreactivos</button>
    </div>
    <ul id="preguntas-list"></ul>

    <button onclick="abrirConfirmacionModal()">Agregar al Examen</button>
    <button onclick="abrirModal()">Agregar Pregunta</button>
    <button onclick="abrirModalLectura()">Agregar Lectura</button>
    <a href="index">Volver a Inicio</a>

    <!-- Modal Agregar Pregunta -->
    <div id="modal" style="display:none; position:fixed; top:0; left:0; width:100%; height:100%; background-color:rgba(0,0,0,0.5);">
        <div style="background-color:#fff; margin:10% auto; padding:20px; width:50%;">
            <h2>Agregar Pregunta</h2>
            <form id="form-pregunta" onsubmit="guardarPregunta(event)">
                <input type="hidden" id="pregunta-id" name="pregunta-id">
                <div>
                    <label for="nivel-educativo">Nivel Educativo:</label>
                    <select id="nivel-educativo" name="nivel-educativo" required onchange="cargarAsignaturasPorNivel(); cargarLecturasEnPreguntas();">
                        <option value="" disabled selected>Seleccione Nivel Educativo</option>
                    </select>
                </div>
                <div>
                    <label for="campo-formativo">Campo Formativo:</label>
                    <select id="campo-formativo" name="campo-formativo" required onchange="cargarLecturasEnPreguntas();">
                        <option value="" disabled selected>Seleccione Campo Formativo</option>
                    </select>
                </div>
                <div>
                    <label for="asignatura">Asignatura:</label>
                    <select id="asignatura" name="asignatura" required onchange="cargarLecturasEnPreguntas();">
                        <option value="" disabled selected>Seleccione Asignatura</option>
                    </select>
                </div>
                <div>
                    <label for="tipo-pregunta">Tipo de Pregunta:</label>
                    <select id="tipo-pregunta" name="tipo-pregunta" required onchange="cambiarTipoPregunta()">
                        <option value="" disabled selected>Seleccione Tipo de Pregunta</option>
                        <option value="Abierta">Abierta</option>
                        <option value="Opción Múltiple">Opción Múltiple</option>
                        <option value="Falso-Verdadera">Falso-Verdadera</option>
                        <option value="Lectura Multirreactivos">Lectura Multirreactivos</option>
                    </select>
                </div>
                <div id="pregunta-abierta" style="display:none;">
                    <label for="texto-pregunta-abierta">Texto de la Pregunta:</label>
                    <input type="text" id="texto-pregunta-abierta" name="texto-pregunta-abierta" required>
                </div>
                <div id="pregunta-multiple" style="display:none;">
                    <label for="texto-pregunta-multiple">Texto de la Pregunta:</label>
                    <input type="text" id="texto-pregunta-multiple" name="texto-pregunta-multiple" required>
                    <div>
                        <label>Opción A:</label>
                        <input type="text" id="opcion-a" name="opcion-a" required>
                        <input type="radio" name="correcta" value="A" required> Correcta
                    </div>
                    <div>
                        <label>Opción B:</label>
                        <input type="text" id="opcion-b" name="opcion-b" required>
                        <input type="radio" name="correcta" value="B"> Correcta
                    </div>
                    <div>
                        <label>Opción C:</label>
                        <input type="text" id="opcion-c" name="opcion-c" required>
                        <input type="radio" name="correcta" value="C"> Correcta
                    </div>
                    <div>
                        <label>Opción D:</label>
                        <input type="text" id="opcion-d" name="opcion-d" required>
                        <input type="radio" name="correcta" value="D"> Correcta
                    </div>
                </div>
                <div id="pregunta-verdadero-falso" style="display:none;">
                    <label for="texto-pregunta-verdadero-falso">Texto de la Pregunta:</label>
                    <input type="text" id="texto-pregunta-verdadero-falso" name="texto-pregunta-verdadero-falso" required>
                    <div>
                        <input type="radio" name="correcta-vf" value="Verdadero" required> Verdadero
                        <input type="radio" name="correcta-vf" value="Falso"> Falso
                    </div>
                </div>
                <div id="pregunta-lectura" style="display:none;">
                    <label for="texto-pregunta-lectura">Texto de la Pregunta:</label>
                    <input type="text" id="texto-pregunta-lectura" name="texto-pregunta-lectura" required>
                    <label for="lectura">Lectura:</label>
                    <select id="lectura" name="lectura" required>
                        <option value="" disabled selected>Seleccione Lectura</option>
                    </select>
                    <div>
                        <label>Opción A:</label>
                        <input type="text" id="opcion-a-lectura" name="opcion-a-lectura" required>
                        <input type="radio" name="correcta-lectura" value="A" required> Correcta
                    </div>
                    <div>
                        <label>Opción B:</label>
                        <input type="text" id="opcion-b-lectura" name="opcion-b-lectura" required>
                        <input type="radio" name="correcta-lectura" value="B"> Correcta
                    </div>
                    <div>
                        <label>Opción C:</label>
                        <input type="text" id="opcion-c-lectura" name="opcion-c-lectura" required>
                        <input type="radio" name="correcta-lectura" value="C"> Correcta
                    </div>
                    <div>
                        <label>Opción D:</label>
                        <input type="text" id="opcion-d-lectura" name="opcion-d-lectura" required>
                        <input type="radio" name="correcta-lectura" value="D"> Correcta
                    </div>
                </div>
                <button type="submit">Guardar Pregunta</button>
                <button type="button" onclick="cerrarModal()">Cancelar</button>
            </form>
        </div>
    </div>

    <!-- Modal Lectura -->
    <div id="modal-lectura" style="display:none; position:fixed; top:0; left:0; width:100%; height:100%; background-color:rgba(0,0,0,0.5);">
        <div style="background-color:#fff; margin:10% auto; padding:20px; width:50%;">
            <h2>Agregar Lectura</h2>
            <form id="form-lectura" onsubmit="guardarLectura(event)">
                <div>
                    <label for="titulo-lectura">Título:</label>
                    <input type="text" id="titulo-lectura" name="titulo-lectura" required>
                </div>
                <div>
                    <label for="contenido-lectura">Contenido:</label>
                    <textarea id="contenido-lectura" name="contenido-lectura" required></textarea>
                </div>
                <div>
                    <label for="campo-formativo-lectura">Campo Formativo:</label>
                    <select id="campo-formativo-lectura" name="campo-formativo-lectura" required>
                        <option value="" disabled selected>Seleccione el Campo Formativo</option>
                    </select>
                </div>
                <div>
                    <label for="nivel-educativo-lectura">Nivel Educativo:</label>
                    <select id="nivel-educativo-lectura" name="nivel-educativo-lectura" required onchange="cargarAsignaturasLectura()">
                        <option value="" disabled selected>Seleccione el Nivel Educativo</option>
                    </select>
                </div>
                <div>
                    <label for="asignatura-lectura">Asignatura:</label>
                    <select id="asignatura-lectura" name="asignatura-lectura" required>
                        <option value="" disabled selected>Seleccione la Asignatura</option>
                    </select>
                </div>
                <button type="submit">Guardar Lectura</button>
                <button type="button" onclick="cerrarModalLectura()">Cancelar</button>
            </form>
        </div>
    </div>

    <!-- Modal Confirmación -->
    <div id="confirmacion-modal" style="display:none; position:fixed; top:0; left:0; width:100%; height:100%; background-color:rgba(0,0,0,0.5);">
        <div style="background-color:#fff; margin:10% auto; padding:20px; width:50%;">
            <h2>Confirmar Generación de Examen</h2>
            <p>¿Está seguro de generar el examen con las preguntas seleccionadas?</p>
            <button onclick="confirmarAgregarAlExamen()">Sí</button>
            <button onclick="cerrarConfirmacionModal()">No</button>
        </div>
    </div>

   
    <script>
        let preguntasSeleccionadas = [];
        let preguntas = [];
        let preguntasFiltradas = [];

        async function cargarDatos() {
            const nivelesEducativos = ['Primaria', 'Secundaria'];
            const camposFormativos = await fetch('https://localhost:7162/api/campoFormativo').then(response => response.json());
            const nivelEducativoSelect = document.getElementById('nivel-educativo');
            const nivelEducativoLecturaSelect = document.getElementById('nivel-educativo-lectura');
            nivelesEducativos.forEach(nivel => {
                const option = document.createElement('option');
                option.value = nivel;
                option.textContent = nivel;
                nivelEducativoSelect.appendChild(option);

                const optionLectura = document.createElement('option');
                optionLectura.value = nivel;
                optionLectura.textContent = nivel;
                nivelEducativoLecturaSelect.appendChild(optionLectura);
            });

            const campoFormativoSelect = document.getElementById('campo-formativo');
            const campoFormativoLecturaSelect = document.getElementById('campo-formativo-lectura');
            camposFormativos.forEach(campo => {
                const option = document.createElement('option');
                option.value = campo.id;
                option.textContent = campo.nombre;
                campoFormativoSelect.appendChild(option);

                const optionLectura = document.createElement('option');
                optionLectura.value = campo.id;
                optionLectura.textContent = campo.nombre;
                campoFormativoLecturaSelect.appendChild(optionLectura);
            });
        }

        async function cargarAsignaturasPorNivel() {
            const nivelEducativo = document.getElementById('nivel-educativo').value;
            const asignaturaSelect = document.getElementById('asignatura');

            // Limpiar el combobox de asignaturas
            asignaturaSelect.innerHTML = '<option value="" disabled selected>Seleccione Asignatura</option>';

            if (nivelEducativo) {
                const asignaturas = await fetch(`https://localhost:7162/api/asignatura/ByNivel?nivel=${nivelEducativo}`).then(response => response.json());
                asignaturas.forEach(asignatura => {
                    const option = document.createElement('option');
                    option.value = asignatura.id;
                    option.textContent = asignatura.nombre;
                    asignaturaSelect.appendChild(option);
                });
            }
        }

        async function cargarLecturasEnPreguntas() {
            const nivelEducativo = document.getElementById('nivel-educativo').value;
            const campoFormativoId = document.getElementById('campo-formativo').value;
            const asignaturaId = document.getElementById('asignatura').value;
            const lecturaSelect = document.getElementById('lectura');
            lecturaSelect.innerHTML = '<option value="" disabled selected>Seleccione la Lectura</option>';
            if (!nivelEducativo || !campoFormativoId || !asignaturaId) {
                return; // No cargar lecturas si alguno de los campos no está seleccionado
            }
            try {
                const response = await fetch(`https://localhost:7162/api/Lectura/LecturasByAll?campoFormativoId=${campoFormativoId}&asignaturaId=${asignaturaId}&nivelEducativo=${nivelEducativo}`);
                const lecturas = await response.json();

                lecturas.forEach(lectura => {
                    const option = document.createElement('option');
                    option.value = lectura.id;
                    option.textContent = lectura.titulo;
                    lecturaSelect.appendChild(option);
                });
            } catch (error) {
                console.error('Error al cargar las lecturas:', error);
            }
        }

        // Funciones para el modal de preguntas
        function abrirModal(preguntaId = null) {
            document.getElementById('pregunta-id').value = preguntaId || '';
            if (preguntaId) {
                // Cargar la pregunta en el modal para editar
                const pregunta = preguntas.find(p => p.id === parseInt(preguntaId));
                document.getElementById('nivel-educativo').value = pregunta.nivelEducativo;
                document.getElementById('campo-formativo').value = pregunta.camposFormativosId;
                cargarAsignaturasParaEdicion(pregunta.nivelEducativo, pregunta.asignaturaId);
                document.getElementById('tipo-pregunta').value = pregunta.tipoPregunta;
                cambiarTipoPregunta(); // Ajustar los campos según el tipo de pregunta
                switch (pregunta.tipoPregunta) {
                    case 'Abierta':
                        document.getElementById('texto-pregunta-abierta').value = pregunta.texto;
                        break;
                    case 'Opción Múltiple':
                        document.getElementById('texto-pregunta-multiple').value = pregunta.texto;
                        pregunta.respuestas.forEach((respuesta, index) => {
                            document.getElementById(`opcion-${String.fromCharCode(97 + index)}`).value = respuesta.texto;
                            if (respuesta.esCorrecta) {
                                document.querySelector(`input[name="correcta"][value="${String.fromCharCode(65 + index)}"]`).checked = true;
                            }
                        });
                        break;
                    case 'Falso-Verdadera':
                        document.getElementById('texto-pregunta-verdadero-falso').value = pregunta.texto;
                        if (pregunta.respuestas[0].esCorrecta) {
                            document.querySelector('input[name="correcta-vf"][value="Verdadero"]').checked = true;
                        } else {
                            document.querySelector('input[name="correcta-vf"][value="Falso"]').checked = true;
                        }
                        break;
                    case 'Lectura Multirreactivos':
                        document.getElementById('texto-pregunta-lectura').value = pregunta.texto;
                        document.getElementById('lectura').value = pregunta.lecturaId;
                        pregunta.respuestas.forEach((respuesta, index) => {
                            document.getElementById(`opcion-${String.fromCharCode(97 + index)}-lectura`).value = respuesta.texto;
                            if (respuesta.esCorrecta) {
                                document.querySelector(`input[name="correcta-lectura"][value="${String.fromCharCode(65 + index)}"]`).checked = true;
                            }
                        });
                        break;
                }
            } else {
                // Limpiar el modal para agregar una nueva pregunta
                document.getElementById('form-pregunta').reset();
                cambiarTipoPregunta();
            }
            document.getElementById('modal').style.display = 'block';
        }

        function cerrarModal() {
            document.getElementById('modal').style.display = 'none';
            document.getElementById('form-pregunta').reset();
            cambiarTipoPregunta();
        }

        // Funciones para el modal de lecturas
        function abrirModalLectura() {
            document.getElementById('modal-lectura').style.display = 'block';
        }

        function cerrarModalLectura() {
            document.getElementById('modal-lectura').style.display = 'none';
            document.getElementById('form-lectura').reset();
        }

        async function guardarLectura(event) {
            event.preventDefault();

            const titulo = document.getElementById('titulo-lectura').value;
            const contenido = document.getElementById('contenido-lectura').value;
            const campoFormativoId = document.getElementById('campo-formativo-lectura').value;
            const nivelEducativo = document.getElementById('nivel-educativo-lectura').value;
            const asignaturaId = document.getElementById('asignatura-lectura').value;

            const lectura = {
                Titulo: titulo,
                Contenido: contenido,
                CamposFormativosId: campoFormativoId,
                NivelEducativo: nivelEducativo,
                AsignaturaId: asignaturaId
            };

            try {
                const response = await fetch('https://localhost:7162/api/Lectura/CrearLectura', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(lectura)
                });

                if (!response.ok) {
                    throw new Error('Error al guardar la lectura');
                }

                cerrarModalLectura();
                // Aquí puedes llamar a cargarLecturas() si decides implementar la funcionalidad para mostrar las lecturas
                // cargarLecturas();
            } catch (error) {
                console.error('Error al guardar la lectura:', error);
            }
        }

        async function cargarAsignaturasLectura() {
            const nivelEducativo = document.getElementById('nivel-educativo-lectura').value;
            const asignaturaSelect = document.getElementById('asignatura-lectura');
            asignaturaSelect.innerHTML = '<option value="" disabled selected>Seleccione la Asignatura</option>';

            try {
                const response = await fetch(`https://localhost:7162/api/asignatura/ByNivel?nivel=${nivelEducativo}`);
                const asignaturas = await response.json();

                asignaturas.forEach(asignatura => {
                    const option = document.createElement('option');
                    option.value = asignatura.id;
                    option.textContent = asignatura.nombre;
                    asignaturaSelect.appendChild(option);
                });
            } catch (error) {
                console.error('Error al cargar las asignaturas:', error);
            }
        }

        async function cargarAsignaturasParaEdicion(nivelEducativo, asignaturaId) {
            const asignaturaSelect = document.getElementById('asignatura');
            asignaturaSelect.innerHTML = '<option value="" disabled selected>Seleccione Asignatura</option>';

            if (nivelEducativo) {
                const asignaturas = await fetch(`https://localhost:7162/api/asignatura/ByNivel?nivel=${nivelEducativo}`).then(response => response.json());
                asignaturas.forEach(asignatura => {
                    const option = document.createElement('option');
                    option.value = asignatura.id;
                    option.textContent = asignatura.nombre;
                    asignaturaSelect.appendChild(option);
                });
                asignaturaSelect.value = asignaturaId;
            }
        }

        function cambiarTipoPregunta() {
            const tipoPregunta = document.getElementById('tipo-pregunta').value;
            document.getElementById('pregunta-abierta').style.display = tipoPregunta === 'Abierta' ? 'block' : 'none';
            document.getElementById('pregunta-multiple').style.display = tipoPregunta === 'Opción Múltiple' ? 'block' : 'none';
            document.getElementById('pregunta-verdadero-falso').style.display = tipoPregunta === 'Falso-Verdadera' ? 'block' : 'none';
            document.getElementById('pregunta-lectura').style.display = tipoPregunta === 'Lectura Multirreactivos' ? 'block' : 'none';

            // Remueve el atributo required de todos los inputs inicialmente
            document.querySelectorAll('#form-pregunta input, #form-pregunta select').forEach(input => {
                input.required = false;
            });

            switch (tipoPregunta) {
                case 'Abierta':
                    document.getElementById('texto-pregunta-abierta').required = true;
                    break;
                case 'Opción Múltiple':
                    document.querySelectorAll('#pregunta-multiple input[type="text"]').forEach(input => {
                        input.required = true;
                    });
                    break;
                case 'Falso-Verdadera':
                    document.getElementById('texto-pregunta-verdadero-falso').required = true;
                    document.querySelectorAll('#pregunta-verdadero-falso input[type="radio"]').forEach(input => {
                        input.required = true;
                    });
                    break;
                case 'Lectura Multirreactivos':
                    document.querySelectorAll('#pregunta-lectura input[type="text"], #pregunta-lectura select').forEach(input => {
                        input.required = true;
                    });
                    break;
            }
        }

        async function guardarPregunta(event) {
            event.preventDefault();

            const tipoPregunta = document.getElementById('tipo-pregunta').value;
            const nivelEducativo = document.getElementById('nivel-educativo').value;
            const campoFormativoId = document.getElementById('campo-formativo').value;
            const asignaturaId = document.getElementById('asignatura').value;
            const preguntaId = document.getElementById('pregunta-id').value;
            let texto;

            switch (tipoPregunta) {
                case 'Abierta':
                    texto = document.getElementById('texto-pregunta-abierta').value;
                    break;
                case 'Opción Múltiple':
                    texto = document.getElementById('texto-pregunta-multiple').value;
                    break;
                case 'Falso-Verdadera':
                    texto = document.getElementById('texto-pregunta-verdadero-falso').value;
                    break;
                case 'Lectura Multirreactivos':
                    texto = document.getElementById('texto-pregunta-lectura').value;
                    break;
                default:
                    console.error('Tipo de pregunta no válido');
                    return;
            }

            const pregunta = {
                Texto: texto,
                CamposFormativosId: campoFormativoId,
                NivelEducativo: nivelEducativo,
                TipoPregunta: tipoPregunta,
                AsignaturaId: asignaturaId
            };

            if (tipoPregunta === 'Lectura Multirreactivos') {
                pregunta.LecturaId = document.getElementById('lectura').value;
            }

            try {
                let nuevaPregunta;
                if (preguntaId) {
                    pregunta.Id = preguntaId;
                    const response = await fetch(`https://localhost:7162/api/PreguntaRespuesta/Preguntas/${preguntaId}`, {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(pregunta)
                    });
                    nuevaPregunta = await response.json();
                } else {
                    const response = await fetch('https://localhost:7162/api/PreguntaRespuesta/CrearPregunta', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(pregunta)
                    });
                    nuevaPregunta = await response.json();
                }

                if (tipoPregunta === 'Opción Múltiple' || tipoPregunta === 'Lectura Multirreactivos' || tipoPregunta === 'Falso-Verdadera') {
                    const opciones = tipoPregunta === 'Falso-Verdadera' ? ['Verdadero', 'Falso'] : ['A', 'B', 'C', 'D'];

                    // Eliminar todas las respuestas existentes para la pregunta
                    const respuestasExistentes = await fetch(`https://localhost:7162/api/PreguntaRespuesta/RespuestasPorPregunta/${nuevaPregunta.id}`).then(response => response.json());
                    for (const respuesta of respuestasExistentes) {
                        await fetch(`https://localhost:7162/api/PreguntaRespuesta/Respuestas/${respuesta.id}`, {
                            method: 'DELETE'
                        });
                    }

                    // Agregar las nuevas respuestas
                    for (const opcion of opciones) {
                        const textoRespuesta = tipoPregunta === 'Falso-Verdadera' ? opcion : document.getElementById(`opcion-${opcion.toLowerCase()}${tipoPregunta === 'Lectura Multirreactivos' ? '-lectura' : ''}`).value;
                        let esCorrecta;
                        if (tipoPregunta === 'Falso-Verdadera' || tipoPregunta === 'Lectura Multirreactivos') {
                            esCorrecta = document.querySelector(`input[name="correcta${tipoPregunta === 'Lectura Multirreactivos' ? '-lectura' : '-vf'}"]:checked`).value === opcion;
                        } else {
                            esCorrecta = document.querySelector(`input[name="correcta"]:checked`).value === opcion;
                        }

                        const respuesta = {
                            Texto: textoRespuesta,
                            PreguntaId: nuevaPregunta.id,
                            Correcta: esCorrecta
                        };

                        await fetch('https://localhost:7162/api/PreguntaRespuesta/CrearRespuesta', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify(respuesta)
                        });
                    }
                }

                cerrarModal();
                cargarPreguntas();
            } catch (error) {
                console.error('Error al guardar la pregunta:', error);
            }
        }

        async function cargarPreguntas() {
            const id = sessionStorage.getItem('id');
            const tipo = sessionStorage.getItem('tipo');
            const nivelEducativo = sessionStorage.getItem('nivelEducativo');

            let endpoint;
            let tipoSeleccionadoTexto = tipo.charAt(0).toUpperCase() + tipo.slice(1);

            if (tipo === 'campoFormativo') {
                endpoint = `https://localhost:7162/api/PreguntaRespuesta/PreguntasPorCampoFormativo?campoFormativoId=${id}&nivelEducativo=${nivelEducativo}`;
                const campoFormativo = await fetch(`https://localhost:7162/api/campoFormativo/${id}`).then(response => response.json());
                tipoSeleccionadoTexto += ` - ${campoFormativo.nombre}`;
            } else if (tipo === 'asignatura') {
                endpoint = `https://localhost:7162/api/PreguntaRespuesta/PreguntasPorAsignatura?asignaturaId=${id}&nivelEducativo=${nivelEducativo}`;
                const asignatura = await fetch(`https://localhost:7162/api/asignatura/${id}`).then(response => response.json());
                tipoSeleccionadoTexto += ` - ${asignatura.nombre}`;
            }

            document.getElementById('tipo-seleccionado').textContent = tipoSeleccionadoTexto;
            document.getElementById('nivel-educativo-seleccionado').textContent = nivelEducativo;

            try {
                const response = await fetch(endpoint);
                preguntas = await response.json();
                preguntasFiltradas = preguntas.filter(p => p.tipoPregunta === 'Opción Múltiple'); // Mostrar por defecto preguntas de opción múltiple
                mostrarPreguntas();
            } catch (error) {
                console.error('Error al cargar las preguntas:', error);
            }
        }

        function mostrarPreguntas() {
            const preguntasList = document.getElementById('preguntas-list');
            preguntasList.innerHTML = '';

            preguntasFiltradas.forEach(pregunta => {
                const listItem = document.createElement('li');

                const checkbox = document.createElement('input');
                checkbox.type = 'checkbox';
                checkbox.value = pregunta.id;
                checkbox.setAttribute('data-tipo', pregunta.tipoPregunta);

                const label = document.createElement('label');
                label.textContent = pregunta.texto;

                listItem.appendChild(checkbox);
                listItem.appendChild(label);

                if (pregunta.tipoPregunta === 'Opción Múltiple' || pregunta.tipoPregunta === 'Lectura Multirreactivos' || pregunta.tipoPregunta === 'Falso-Verdadera') {
                    const respuestasDiv = document.createElement('div');

                    if (pregunta.respuestas && pregunta.respuestas.length > 0) {
                        const opcionesRespuesta = pregunta.respuestas.map((respuesta, index) => {
                            const letra = String.fromCharCode(65 + index); // Generar letras A, B, C, D, ...
                            return `${letra}) ${respuesta.texto}`;
                        }).join('<br>');
                        respuestasDiv.innerHTML = opcionesRespuesta;
                    } else {
                        // Fetch responses if they are not preloaded
                        fetch(`https://localhost:7162/api/PreguntaRespuesta/RespuestasPorPregunta/${pregunta.id}`)
                            .then(respuestaResponse => respuestaResponse.json())
                            .then(respuestas => {
                                pregunta.respuestas = respuestas;
                                const opcionesRespuesta = respuestas.map((respuesta, index) => {
                                    const letra = String.fromCharCode(65 + index); // Generar letras A, B, C, D, ...
                                    return `${letra}) ${respuesta.texto}`;
                                }).join('<br>');
                                respuestasDiv.innerHTML = opcionesRespuesta;
                            });
                    }

                    listItem.appendChild(respuestasDiv);
                }

                // Botones de editar y eliminar
                const editButton = document.createElement('button');
                editButton.textContent = 'Editar';
                editButton.onclick = () => abrirModal(pregunta.id);
                listItem.appendChild(editButton);

                const deleteButton = document.createElement('button');
                deleteButton.textContent = 'Eliminar';
                deleteButton.onclick = () => eliminarPregunta(pregunta.id);
                listItem.appendChild(deleteButton);

                preguntasList.appendChild(listItem);
            });
        }

        async function eliminarPregunta(preguntaId) {
            if (confirm('¿Está seguro de que desea eliminar esta pregunta?')) {
                try {
                    await fetch(`https://localhost:7162/api/PreguntaRespuesta/Preguntas/${preguntaId}`, {
                        method: 'DELETE'
                    });
                    cargarPreguntas();
                } catch (error) {
                    console.error('Error al eliminar la pregunta:', error);
                }
            }
        }

        async function agregarAlExamen() {
            const checkboxes = document.querySelectorAll('#preguntas-list input[type="checkbox"]:checked');
            preguntasSeleccionadas = [];

            for (const checkbox of checkboxes) {
                const preguntaId = checkbox.value;
                const preguntaTexto = checkbox.nextElementSibling.textContent;
                const tipoPregunta = checkbox.getAttribute('data-tipo');
                const respuestas = [];

                if (tipoPregunta === 'Opción Múltiple' || tipoPregunta === 'Lectura Multirreactivos' || tipoPregunta === 'Falso-Verdadera') {
                    const respuestasResponse = await fetch(`https://localhost:7162/api/PreguntaRespuesta/RespuestasPorPregunta/${preguntaId}`);
                    const respuestasData = await respuestasResponse.json();

                    respuestasData.forEach((respuesta, index) => {
                        const letra = String.fromCharCode(65 + index); // Generar letras A, B, C, D, ...
                        const esCorrecta = respuesta.esCorrecta;

                        respuestas.push({
                            letra: letra,
                            texto: respuesta.texto,
                            esCorrecta: esCorrecta
                        });
                    });
                }

                preguntasSeleccionadas.push({
                    id: preguntaId,
                    texto: preguntaTexto,
                    tipo: tipoPregunta,
                    respuestas: respuestas
                });
            }

            alert('Preguntas agregadas al examen.');
        }

        function abrirConfirmacionModal() {
            document.getElementById('confirmacion-modal').style.display = 'block';
        }

        function cerrarConfirmacionModal() {
            document.getElementById('confirmacion-modal').style.display = 'none';
        }

        async function confirmarAgregarAlExamen() {
            await agregarAlExamen();
            cerrarConfirmacionModal();
            generarPDF();
        }
        function generarPDF() {
            const { jsPDF } = window.jspdf;
            const doc = new jsPDF();

            const nombreEscuela = sessionStorage.getItem('nombreEscuela');
            const turno = sessionStorage.getItem('turno');
            const grado = sessionStorage.getItem('grado');
            const seccion = sessionStorage.getItem('seccion');
            const docenteId = sessionStorage.getItem('docenteId');
            const asignatura = sessionStorage.getItem('asignatura');
            const campoFormativo = sessionStorage.getItem('campoFormativo');
            const nivelEducativo = sessionStorage.getItem('nivelEducativo');
            const fechaActual = new Date().toLocaleString('es-MX', { year: 'numeric', month: '2-digit', day: '2-digit' }).replace(/\//g, '-');

            // Generar la página del examen
            doc.setFontSize(16);
            doc.text(nombreEscuela, 10, 10);
            doc.setFontSize(12);
            doc.text(`Turno: ${turno}`, 10, 20);
            doc.text(`Grado: ${grado} Sección: ${seccion}`, 10, 30);
            doc.text(`Asignatura: ${asignatura || 'N/A'}`, 10, 40);
            doc.text(`Campo Formativo: ${campoFormativo || 'N/A'}`, 10, 50);
            doc.text(`Fecha: ${fechaActual}`, 10, 60);
            doc.text('Nombre del Alumno: ___________________________', 10, 70);

            let yOffset = 80;
            doc.setFontSize(12);
            preguntasSeleccionadas.forEach((pregunta, index) => {
                doc.text(`${index + 1}. ${pregunta.texto}`, 10, yOffset);
                yOffset += 10;

                if (pregunta.tipo === 'Opción Múltiple' || pregunta.tipo === 'Lectura Multirreactivos') {
                    pregunta.respuestas.forEach((respuesta, respIndex) => {
                        const letra = String.fromCharCode(65 + respIndex); // Generar letras A, B, C, D, ...
                        doc.text(`${letra}) ${respuesta.texto}`, 20, yOffset);
                        yOffset += 10;
                    });
                } else if (pregunta.tipo === 'Falso-Verdadera') {
                    pregunta.respuestas.forEach((respuesta, respIndex) => {
                        const letra = String.fromCharCode(65 + respIndex); // Generar letras A, B
                        doc.text(`${letra}) ${respuesta.texto}`, 20, yOffset);
                        yOffset += 10;
                    });
                }

                yOffset += 10;
            });

            // Agregar nueva página para las respuestas correctas
            doc.addPage();

            doc.setFontSize(16);
            doc.text('Respuestas Correctas', 10, 10);
            yOffset = 20;
            doc.setFontSize(12);

            preguntasSeleccionadas.forEach((pregunta, index) => {
                doc.text(`${index + 1}. ${pregunta.texto}`, 10, yOffset);
                yOffset += 10;

                if (pregunta.tipo === 'Opción Múltiple' || pregunta.tipo === 'Lectura Multirreactivos') {
                    const respuestaCorrecta = pregunta.respuestas.find(respuesta => respuesta.esCorrecta);
                    if (respuestaCorrecta) {
                        const letraCorrecta = pregunta.respuestas.indexOf(respuestaCorrecta); // Encontrar el índice de la respuesta correcta
                        doc.text(`Respuesta Correcta: ${String.fromCharCode(65 + letraCorrecta)}`, 20, yOffset);
                    } else {
                        doc.text('Respuesta Correcta: No definida', 20, yOffset);
                    }
                } else if (pregunta.tipo === 'Falso-Verdadera') {
                    const respuestaCorrecta = pregunta.respuestas.find(respuesta => respuesta.esCorrecta);
                    if (respuestaCorrecta) {
                        doc.text(`Respuesta Correcta: ${respuestaCorrecta.texto}`, 20, yOffset);
                    } else {
                        doc.text('Respuesta Correcta: No definida', 20, yOffset);
                    }
                } else if (pregunta.tipo === 'Abierta') {
                    doc.text('Respuesta Correcta: Criterio del Maestro', 20, yOffset);
                }

                yOffset += 10;
            });

            // Convertir a Blob y enviar al servidor
            const pdfBlob = doc.output('blob');
            const fileName = `Examen_${fechaActual}.pdf`;
            const formData = new FormData();
            formData.append('pdf', pdfBlob, fileName);
            formData.append('nombreEscuela', nombreEscuela);
            formData.append('turno', turno);
            formData.append('grado', grado);
            formData.append('seccion', seccion);
            formData.append('docenteId', docenteId);
            formData.append('asignatura', asignatura || '');
            formData.append('campoFormativo', campoFormativo || '');
            formData.append('nivelEducativo', nivelEducativo || '');
            formData.append('fecha', fechaActual); // Añadir la fecha

            fetch('https://localhost:7162/api/Examen/GenerarExamen', {
                method: 'POST',
                body: formData
            }).then(response => {
                if (response.ok) {
                    alert('Examen generado y guardado exitosamente.');
                } else {
                    alert('Error al generar el examen.');
                }
            }).catch(error => {
                console.error('Error al enviar el PDF al servidor:', error);
            });

            doc.save();
            cargarPreguntas();
        }
        
        // Filtrar preguntas por tipo
        function filtrarPreguntas(tipo) {
            preguntasFiltradas = preguntas.filter(p => p.tipoPregunta === tipo);
            mostrarPreguntas();
        }

        // Asegurarse de que las preguntas se carguen correctamente cuando la página se cargue
        document.addEventListener('DOMContentLoaded', () => {
            cargarDatos();
            cargarPreguntas();
        });
    </script>
</body>
</html>