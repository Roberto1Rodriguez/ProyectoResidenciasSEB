@page
@model ProyectoResidenciasWeb.Pages.verExamenModel
@{
}
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Ver Examen</title>
    <link rel="stylesheet" href="/css/styles.css" />
    <link href="https://fonts.googleapis.com/css2?family=Lilita+One&family=Space+Grotesk:wght@300..700&family=Varela+Round&display=swap" rel="stylesheet">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link href="https://fonts.googleapis.com/css2?family=Quicksand:wght@300..700&display=swap" rel="stylesheet">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Lilita+One&display=swap" rel="stylesheet">
</head>
<body class="detalles-ex-body">
    <!-- Header con logos y botón de registro -->
    <header class="header">
        <img src="/images/logo_coah.png" alt="Logo Izquierda" class="logo-izquierda">
        <label>Generador de pruebas escritas.</label>
        <div class="header-right">
            <img src="/images/logo_sedu4.png" alt="Logo Derecha" class="logo-derecha">
        </div>
    </header>

    <div class="index-options">
        <div>
            <h3>
                Hola,<span id="nombre-perfil">Roberto Rodriguez Wong</span><svg id="settingsIcon" xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-settings" width="25" height="25" viewBox="0 0 24 24" stroke-width="1.5" stroke="#000000" fill="none" stroke-linecap="round" stroke-linejoin="round">
                    <path stroke="none" d="M0 0h24v24H0z" fill="none" />
                    <path d="M10.325 4.317c.426 -1.756 2.924 -1.756 3.35 0a1.724 1.724 0 0 0 2.573 1.066c1.543 -.94 3.31 .826 2.37 2.37a1.724 1.724 0 0 0 1.065 2.572c1.756 .426 1.756 2.924 0 3.35a1.724 1.724 0 0 0 -1.066 2.573c.94 1.543 -.826 3.31 -2.37 2.37a1.724 1.724 0 0 0 -2.572 1.065c-.426 1.756 -2.924 1.756 -3.35 0a1.724 1.724 0 0 0 -2.573 -1.066c-1.543 .94 -3.31 -.826 -2.37 -2.37a1.724 1.724 0 0 0 -1.065 -2.572c-1.756 -.426 -1.756 -2.924 0 -3.35a1.724 1.724 0 0 0 1.066 -2.573c-.94 -1.543 .826 -3.31 2.37 -2.37c1 .608 2.296 .07 2.572 -1.065z" />
                    <path d="M9 12a3 3 0 1 0 6 0a3 3 0 0 0 -6 0" />
                </svg>
            </h3>
            <label id="rol" class="instrucciones" style="font-size:large; font-weight: normal; color: gray; font-family: 'Quicksand';">Docente</label>
        </div>

        <!--CONTEXT MENU CERRAR SESION-->
        <div id="contextMenu" class="context-menu">
            <ul>
                <li id="cambiar-contraseña">Cambiar contraseña</li>
                <li id="logout">Cerrar sesión</li>
            </ul>
        </div>

        <!-- Modal cambiar contraseña -->
        <div id="cambiarContrasenaModal" class="modal">
            <div class="modal-content">
                <span class="close">&times;</span>
                <h2>Cambiar Contraseña</h2>
                <form id="cambiarContrasenaForm">
                    <div class="input-group">
                        <input type="password" id="current-password" required placeholder=" ">
                        <label for="current-password">Contraseña Actual</label>
                    </div>
                    <div class="input-group">
                        <input type="password" id="new-password" required placeholder=" ">
                        <label for="new-password">Nueva Contraseña</label>
                    </div>
                    <div class="input-group">
                        <input type="password" id="confirm-new-password" required placeholder=" ">
                        <label for="confirm-new-password">Confirmar Nueva Contraseña</label>
                    </div>
                    <button type="submit">Guardar</button>
                </form>
            </div>
        </div>

        <div class="index-options-btns">
            <button onclick="window.location.href='Index'">Inicio</button>
            <button onclick="window.location.href='agregarAlumno'" class="btn-agg-alumno" id="openModalBtn">Agregar Alumno</button>
            <button onclick="window.location.href='ListaExamenes'" class="btn-examenlist">Exámenes</button>
        </div>
    </div>

    <div class="detalles-ex-conteiner">

        <div>
            <h1>Detalles del Examen</h1>
            <input type="text" id="search-input" placeholder="Buscar alumno por nombre..." oninput="filtrarAlumnos()">

        </div>
       
        <div>
            <div id="detalles-examen"></div>
            <div class="buttons-group-ex">
                <button onclick="abrirConfirmacionModal()">Guardar Calificaciones</button>
                <button id="descargar-examen-pdf" onclick="descargarExamenPDF()">Descargar Examen</button>
            </div>
        </div>

       
        <h2>Alumnos</h2>
        <ul id="alumnos-list"></ul>
        <button id="volver" class="hidden" onclick="window.location.href='listaExamenes'">Volver</button>
    </div>

    <!-- Modal Confirmación -->
    <div id="confirmacion-modal" style="display:none; position:fixed; top:0; left:0; width:100%; height:100%; background-color:rgba(0,0,0,0.5);">
        <div style="background-color:#fff; margin:10% auto; padding:20px; width:50%;">
            <h2>Confirmar Guardar Calificaciones</h2>
            <p>¿Está seguro de que desea guardar las calificaciones?</p>
            <button onclick="guardarCalificaciones()">Sí</button>
            <button onclick="cerrarConfirmacionModal()">No</button>
        </div>
    </div>

    <script>
        let alumnosData = [];

        document.addEventListener('DOMContentLoaded', async () => {
            const examenId = sessionStorage.getItem('examenId');
            const response = await fetch(`https://residenciassebapi.sistemas19.com/api/Examen/examen/${examenId}`);
            const data = await response.json();

            const detallesExamen = document.getElementById('detalles-examen');
            const examen = data.examen;

            let detallesTexto = `Examen ID: ${examen.id}<br>`;
            detallesTexto += `Nivel Educativo: ${examen.nivelEducativo}<br>`;
            if (examen.campoFormativo) {
                detallesTexto += `Campo Formativo: ${examen.campoFormativo}<br>`;
            } else {
                detallesTexto += `Asignatura: ${examen.asignatura}<br>`;
            }
            detallesTexto += `Fecha: ${new Date(examen.fecha).toLocaleDateString('es-ES')}<br>`;

            detallesExamen.innerHTML = detallesTexto;

            alumnosData = data.alumnos;
            mostrarAlumnos(alumnosData);
        });

        function mostrarAlumnos(alumnos) {
            const examenId = sessionStorage.getItem('examenId');

            const alumnosList = document.getElementById('alumnos-list');
            alumnosList.innerHTML = ''; // Limpiar lista antes de agregar los elementos

            alumnos.forEach(alumno => {
                const listItem = document.createElement('li');
                listItem.innerHTML = `
                            <span>${alumno.alumno.nombre} - Calificación:
                                <input type="number" value="${alumno.calificacion || 0}" min="0" max="10" step="0.1" data-alumno-id="${alumno.alumno.id}">
                            </span>
                            <button onclick="descargarRespuestas(${alumno.alumno.id}, '${alumno.alumno.nombre}', ${examenId})"
                                    ${alumno.ubicacionRespuestasPDF ? '' : 'disabled'}
                                    style="background-color: ${alumno.ubicacionRespuestasPDF ? '' : 'gray'};">
                                Ver Respuestas
                            </button>
                        `;
                alumnosList.appendChild(listItem);
            });
        }

        function filtrarAlumnos() {
            const searchInput = document.getElementById('search-input').value.toLowerCase();
            const alumnosFiltrados = alumnosData.filter(alumno =>
                alumno.alumno.nombre.toLowerCase().includes(searchInput)
            );
            mostrarAlumnos(alumnosFiltrados);
        }

        function abrirConfirmacionModal() {
            document.getElementById('confirmacion-modal').style.display = 'block';
        }

        function cerrarConfirmacionModal() {
            document.getElementById('confirmacion-modal').style.display = 'none';
        }

        async function guardarCalificaciones() {
            const examenId = sessionStorage.getItem('examenId');
            const inputs = document.querySelectorAll('#alumnos-list input[type="number"]');

            for (const input of inputs) {
                const alumnoId = input.getAttribute('data-alumno-id');
                const calificacion = parseFloat(input.value) || 0;

                await fetch('https://residenciassebapi.sistemas19.com/api/Examen/calificar', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ ExamenId: examenId, AlumnoId: alumnoId, Calificacion: calificacion })
                });
            }

            cerrarConfirmacionModal();
            alert('Calificaciones guardadas exitosamente.');
        }

        async function descargarRespuestas(alumnoId, nombreAlumno, examenId) {
            const url = `https://residenciassebapi.sistemas19.com/api/Examen/DescargarRespuestas?examenId=${examenId}&alumnoId=${alumnoId}`;

            try {
                const response = await fetch(url);
                if (!response.ok) {
                    throw new Error('Error al descargar las respuestas.');
                }

                const blob = await response.blob();
                const link = document.createElement('a');
                link.href = window.URL.createObjectURL(blob);
                link.download = `Respuestas_${nombreAlumno.replace(/\s+/g, '_')}_${examenId}.pdf`;
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
            } catch (error) {
                console.error('Error al descargar las respuestas:', error);
                alert('Error al descargar las respuestas.');
            }
        }

        async function descargarExamenPDF() {
            const examenId = sessionStorage.getItem('examenId');
            const url = `https://residenciassebapi.sistemas19.com/api/Examen/DescargarExamen?examenId=${examenId}`;

            try {
                const response = await fetch(url);
                if (!response.ok) {
                    throw new Error('Error al descargar el examen.');
                }

                const blob = await response.blob();
                const link = document.createElement('a');
                link.href = window.URL.createObjectURL(blob);
                link.download = `Examen_${examenId}.pdf`;
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
            } catch (error) {
                console.error('Error al descargar el examen:', error);
                alert('Error al descargar el examen.');
            }
        }
    </script>
    <script src="/js/script.js"></script>
</body>
</html>