@page
@model ProyectoResidenciasWeb.Pages.RealizarExamenModel
@{
}
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Realizar Examen</title>
    <link rel="stylesheet" href="/css/styles.css" />

    <link href="https://fonts.googleapis.com/css2?family=Lilita+One&family=Space+Grotesk:wght@300..700&family=Varela+Round&display=swap" rel="stylesheet">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link href="https://fonts.googleapis.com/css2?family=Quicksand:wght@300..700&display=swap" rel="stylesheet">

    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Lilita+One&display=swap" rel="stylesheet">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.3.1/jspdf.umd.min.js"></script>
</head>
<body>

    <!-- Header con logos y botón de registro -->


    <header class="header">
        <img src="/images/logo_coah.png" alt="Logo Izquierda" class="logo-izquierda">
        <label>Generador de pruebas escritas.</label>
        <div class="header-right">
            <img src="/images/logo_sedu4.png" alt="Logo Derecha" class="logo-derecha">

        </div>


    </header>


    <!---------------------------------------->
    <!-- Modal cambiar contraseña -->


    <div id="cambiarContrasenaModal" class="modal">

        <div class="modal-content">
            <span class="close">&times;</span>
            <h2>Cambiar Contraseña</h2>

            <form id="cambiarContrasenaForm">
                <div class="input-group">
                    <input type="password" id="current-password" required placeholder=" ">
                    <label for="current-password">Contraseña Actual</label>
                </div>
                <div class="input-group">
                    <input type="password" id="new-password" required placeholder=" ">
                    <label for="new-password">Nueva Contraseña</label>
                </div>
                <div class="input-group">
                    <input type="password" id="confirm-new-password" required placeholder=" ">
                    <label for="confirm-new-password">Confirmar Nueva Contraseña</label>
                </div>
                <button type="submit">Guardar</button>
            </form>

        </div>

    </div>


    <div class="alumno-index-main-conteiner">

        <div id="alumno-info">

            <div class="bienvenida-alumno">


                <div>
                    <label id="nombre-alumno"></label>
                    <svg id="settingsIcon" xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-settings" width="25" height="25" viewBox="0 0 24 24" stroke-width="1.5" stroke="#000000" fill="none" stroke-linecap="round" stroke-linejoin="round">
                        <path stroke="none" d="M0 0h24v24H0z" fill="none" />
                        <path d="M10.325 4.317c.426 -1.756 2.924 -1.756 3.35 0a1.724 1.724 0 0 0 2.573 1.066c1.543 -.94 3.31 .826 2.37 2.37a1.724 1.724 0 0 0 1.065 2.572c1.756 .426 1.756 2.924 0 3.35a1.724 1.724 0 0 0 -1.066 2.573c.94 1.543 -.826 3.31 -2.37 2.37a1.724 1.724 0 0 0 -2.572 1.065c-.426 1.756 -2.924 1.756 -3.35 0a1.724 1.724 0 0 0 -2.573 -1.066c-1.543 .94 -3.31 -.826 -2.37 -2.37a1.724 1.724 0 0 0 -1.065 -2.572c-1.756 -.426 -1.756 -2.924 0 -3.35a1.724 1.724 0 0 0 1.066 -2.573c-.94 -1.543 .826 -3.31 2.37 -2.37c1 .608 2.296 .07 2.572 -1.065z" />
                        <path d="M9 12a3 3 0 1 0 6 0a3 3 0 0 0 -6 0" />
                    </svg>
                </div>

                <label id="rol" class="instrucciones">Alumno</label>
            </div>

            
              


                <button onclick="window.location.href='AlumnoIndex'">
                    <svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-home-2" width="24" height="24" viewBox="0 0 24 24" stroke-width="1.5" stroke="#000000" fill="none" stroke-linecap="round" stroke-linejoin="round">
                        <path stroke="none" d="M0 0h24v24H0z" fill="none" />
                        <path d="M5 12l-2 0l9 -9l9 9l-2 0" />
                        <path d="M5 12v7a2 2 0 0 0 2 2h10a2 2 0 0 0 2 -2v-7" />
                        <path d="M10 12h4v4h-4z" />
                    </svg> Inicio
                </button>


            

            

            <div>
                <label>Grado: <span id="grado-alumno"></span></label>
                <label>Sección: <span id="seccion-alumno"></span></label>
            </div>


        </div>


        <div id="contextMenu" class="context-menu">
            <ul>
                <li id="cambiar-contraseña">Cambiar contraseña</li>
                <li id="logout">Cerrar sesión</li>
            </ul>
        </div>

    <div class="realizar-ex-container">

        <h1>Comienza a contestar tu exámen!</h1>
        <label class="instrucciones">Lee con atención y responde las preguntas correctamente.</label>

        <form id="examen-form">
            <div id="preguntas-container"></div>
            <button class="enviar-resp" type="button" onclick="enviarRespuestas()">Enviar Respuestas</button>
        </form>
    </div>

  
    </div>

    <script>

        document.addEventListener('DOMContentLoaded', async () => {


                const nombreAlumno = sessionStorage.getItem('nombreAlumno');
                const gradoAlumno = sessionStorage.getItem('gradoAlumno');
                const seccionAlumno = sessionStorage.getItem('seccionAlumno');

                document.getElementById('nombre-alumno').textContent = nombreAlumno;
                document.getElementById('grado-alumno').textContent = gradoAlumno;
                document.getElementById('seccion-alumno').textContent = seccionAlumno;

                const examenId = sessionStorage.getItem('examenId');
                const response = await fetch(`https://localhost:7162/api/Alumno/alumno/${usuarioId}`);
                const data = await response.json();
                const preguntas = data.preguntas;
                construirInterfazPreguntas(preguntas);
        });

     

        document.addEventListener('DOMContentLoaded', async () => {
            const examenId = sessionStorage.getItem('examenId');
            const response = await fetch(`https://localhost:7162/api/Examen/ExamenPreguntas/${examenId}`);
            const data = await response.json();
            const preguntas = data.preguntas;
            construirInterfazPreguntas(preguntas);
        });

        async function construirInterfazPreguntas(preguntas) {
            const container = document.getElementById('preguntas-container');
            container.innerHTML = '';

            // Crear un mapa para agrupar preguntas por LecturaId
            const lecturaMap = new Map();

            // Agrupar preguntas por LecturaId
            preguntas.forEach(pregunta => {
                if (pregunta.lecturaId) {
                    if (!lecturaMap.has(pregunta.lecturaId)) {
                        lecturaMap.set(pregunta.lecturaId, []);
                    }
                    lecturaMap.get(pregunta.lecturaId).push(pregunta);
                } else {
                    // Preguntas sin lectura asociada
                    if (!lecturaMap.has(null)) {
                        lecturaMap.set(null, []);
                    }
                    lecturaMap.get(null).push(pregunta);
                }
            });

            // Obtener las lecturas
            const lecturaPromises = [];
            lecturaMap.forEach((_, lecturaId) => {
                if (lecturaId !== null) {
                    lecturaPromises.push(
                        fetch(`https://localhost:7162/api/Lectura/${lecturaId}`)
                            .then(response => response.json())
                            .then(lectura => ({ lecturaId, lectura }))
                    );
                }
            });

            const lecturas = await Promise.all(lecturaPromises);

            // Crear un mapa de lecturas para acceso rápido
            const lecturasMap = new Map();
            lecturas.forEach(({ lecturaId, lectura }) => {
                lecturasMap.set(lecturaId, lectura);
            });

            // Construir la interfaz
            let questionIndex = 0;
            lecturaMap.forEach((preguntas, lecturaId) => {
                if (lecturaId !== null) {
                    const lectura = lecturasMap.get(lecturaId);
                    const lecturaDiv = document.createElement('div');
                    lecturaDiv.classList.add('lectura');
                    lecturaDiv.innerHTML = `<p><b>Lectura:</b> ${lectura.titulo}</p><p>${lectura.contenido}</p>`;
                    container.appendChild(lecturaDiv);
                }

                preguntas.forEach(pregunta => {
                    questionIndex++;
                    const preguntaDiv = document.createElement('div');
                    preguntaDiv.classList.add('pregunta');
                    preguntaDiv.innerHTML = `<p>${questionIndex}. ${pregunta.texto}</p>`;

                    switch (pregunta.tipoPregunta) {
                        case 'Opción Múltiple':
                            pregunta.respuestas.forEach((respuesta, respIndex) => {
                                const letra = String.fromCharCode(65 + respIndex); // Generar letras A, B, C, D
                                preguntaDiv.innerHTML += `
                                            <input type="radio" name="pregunta_${pregunta.id}" value="${respuesta.id}" data-letra="${letra}" data-texto="${respuesta.texto}">
                                            <label>${letra}) ${respuesta.texto}</label><br>
                                        `;
                            });
                            break;

                        case 'Abierta':
                            preguntaDiv.innerHTML += `
                                        <textarea name="pregunta_${pregunta.id}" rows="4" cols="50" data-letra=""></textarea>
                                    `;
                            break;

                        case 'Falso-Verdadera':
                            preguntaDiv.innerHTML += `
                                        <input type="radio" name="pregunta_${pregunta.id}" value="Verdadero" data-letra="Verdadero">
                                        <label>Verdadero</label><br>
                                        <input type="radio" name="pregunta_${pregunta.id}" value="Falso" data-letra="Falso">
                                        <label>Falso</label><br>
                                    `;
                            break;

                        case 'Multireactiva':
                            // Pregunta multireactiva, ya se añadió la lectura, añadir las preguntas y respuestas
                            pregunta.respuestas.forEach((respuesta, respIndex) => {
                                const letra = String.fromCharCode(65 + respIndex); // Generar letras A, B, C, D
                                preguntaDiv.innerHTML += `
                                            <input type="radio" name="pregunta_${pregunta.id}" value="${respuesta.id}" data-letra="${letra}" data-texto="${respuesta.texto}">
                                            <label>${letra}) ${respuesta.texto}</label><br>
                                        `;
                            });
                            break;

                        default:
                            break;
                    }

                    container.appendChild(preguntaDiv);
                });
            });
        }

        async function enviarRespuestas() {
            const form = document.getElementById('examen-form');
            const formData = new FormData(form);
            const respuestas = [];
            const preguntas = document.querySelectorAll('.pregunta');

            preguntas.forEach(preguntaDiv => {
                const preguntaId = preguntaDiv.querySelector('textarea, input[type="radio"]:checked')?.name.split('_')[1];
                const respuestaInput = preguntaDiv.querySelector('textarea, input[type="radio"]:checked');
                const letra = respuestaInput ? respuestaInput.getAttribute('data-letra') : '';
                const texto = respuestaInput ? (respuestaInput.tagName === 'TEXTAREA' ? respuestaInput.value : respuestaInput.getAttribute('data-texto')) : '';

                if (preguntaId) {
                    respuestas.push({ preguntaId, letra, texto });
                }
            });

            const { jsPDF } = window.jspdf;
            const doc = new jsPDF();
            const nombreAlumno = sessionStorage.getItem('nombreAlumno');
            const alumnoId = sessionStorage.getItem('alumnoId');
            const examenId = sessionStorage.getItem('examenId');

            doc.setFontSize(16);
            doc.text(`Respuestas de ${nombreAlumno}`, 10, 10);

            let yOffset = 20;
            let preguntaIndex = 1;
            respuestas.forEach(respuesta => {
                doc.text(`${preguntaIndex}.`, 10, yOffset);
                yOffset += 10;

                if (respuesta.texto) {
                    doc.text(`Respuesta: ${respuesta.letra}. ${respuesta.texto}`, 20, yOffset);
                } else {
                    doc.text(`Respuesta: ${respuesta.letra}`, 20, yOffset);
                }
                yOffset += 10;
                preguntaIndex++;
            });

            const pdfBlob = doc.output('blob');
            const fileName = `Respuestas_${nombreAlumno}_${new Date().toISOString().split('T')[0]}.pdf`;
            const pdfFormData = new FormData();
            pdfFormData.append('pdf', pdfBlob, fileName);
            pdfFormData.append('examenId', examenId);
            pdfFormData.append('alumnoId', alumnoId);

            try {
                const response = await fetch('https://localhost:7162/api/Examen/EnviarRespuestas', {
                    method: 'POST',
                    body: pdfFormData
                });

                if (response.ok) {
                    alert('Respuestas enviadas exitosamente.');
                    window.location.href = 'AlumnoIndex';
                } else {
                    alert('Error al enviar las respuestas.');
                }
            } catch (error) {
                console.error('Error al enviar el PDF al servidor:', error);
            }

            doc.save();
        }

        document.addEventListener('DOMContentLoaded', async () => {
            const usuarioId = sessionStorage.getItem('usuarioId');
            const tipoUsuario = sessionStorage.getItem('tipoUsuario');

            if (!usuarioId || tipoUsuario !== 'A') {
                window.location.href = 'login';
                return;
            }
        });


    </script>

   
    <script src="/js/script.js"></script>
   
</body>
</html>